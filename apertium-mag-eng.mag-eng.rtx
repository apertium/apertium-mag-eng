!!!!!!!!!!!!!!!
!! ATTRIBUTE CATEGORIES
!!!!!!!!!!!!!!!

number = (ND sg) sg pl sp ND;
gender = (GD m) m f mf GD;
person = (PD p3) p1 p2 p3 PD;
det_type = def ind dem itg;
case = (CD subj) subj obj CD;
tense = pres past fut ifi pri fti inf;
subject = (SD s_p1) s_p1 s_p2 s_p3 SD;
adjective_type = sint preadj preadj_nh;

!!!!!!!!!!!!!!!
!! OUTPUT PATTERNS
!!!!!!!!!!!!!!!

n: _.number;
adj: _.adjective_type;
det_default: _.det_type;
det_def: _.det_type.number;
prpers: _.case.person.gender.number;
pr: _;
vbmod: _;
v: _.subject ;
vpers: _.tense.person.number ;
vnotpers: _.tense ;
adv: _;

S: _ ;
NOM: _.case.person.gender.number;
NP: _.number;
PP: _ ;
DP: _.person.number ;
VP: _.subject ;
vP: _.subject ;
AP: _ ;
ADVP: _;

!!!!!!!!!!!!!!!
!! TAG-REWRITE RULES
!!!!!!!!!!!!!!!

tense > tense : ifi past, pri pres, fti fut;
case > case : obl obj, nom subj;

!!!!!!!!!!!!!!!
!! MACROS
!!!!!!!!!!!!!!!

! subject_person: (if (1.person = s_p1)
! 		    1(p1)
! 		 else (if (1.person = s_p2)
! 		      	  1(p2)
! 			else 1(p3)));

!!!!!!!!!!!!!!!
!! REDUCTION RULES
!!!!!!!!!!!!!!!

S -> DP VP { 1 _ %2 } ;
PP -> DP %post { %2(pr) _ 1 } ;
DP -> NP { the@det.def.sp _ %1 } |
       %prn { %1(prpers)[gender=mf] } ;
AP -> adj { 1[adjective_type=sint] } |
      ADVP AP { 1 _ 2[adjective_type=sint] } |
      AP adj { 1 _ 2[adjective_type=sint]} ;
NP -> n { %1 } |
      n PP { 1 _ %2 } |
      AP n { %1 _ 2 };
VP -> %vP { %1 } |
      ADVP %vP { 1 _ %2 } |
      DP %vP { 2 _ %1 } |
      DP ADVP %vP { 2 _ %3 _ 1 } |
      VP PP -> { 1 _ 2 } ;
vP -> v.$tense.$subject {
   (if (1.subject = s_p3 And 1.tense = pres)
        1(vpers)[person=p3, number=sg]
    else
        (if (1.tense = fut)
	    [ will@vbmod.pres _ 1(vnotpers)[tense=inf] ]
	else
	    1(vnotpers))
    )
} ;
ADVP -> adv { 1 } |
        adv ADVP { 1 _ 2 } ;

! Resources:
! http://wiki.apertium.org/wiki/Apertium-recursive
! http://wiki.apertium.org/wiki/Apertium-recursive/Formalism
! http://wiki.apertium.org/wiki/Apertium-recursive/Cookbook
